/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef Freeamp_H
#define Freeamp_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_Freeamp) && !defined(_Freeamp_defined)
#define ORBIT_DECL_Freeamp 1
#define _Freeamp_defined 1
#define Freeamp__free CORBA_Object__free
   typedef CORBA_Object Freeamp;
   extern CORBA_unsigned_long Freeamp__classid;
#if !defined(TC_IMPL_TC_Freeamp_0)
#define TC_IMPL_TC_Freeamp_0 'F'
#define TC_IMPL_TC_Freeamp_1 'r'
#define TC_IMPL_TC_Freeamp_2 'e'
#define TC_IMPL_TC_Freeamp_3 'e'
#define TC_IMPL_TC_Freeamp_4 'a'
#define TC_IMPL_TC_Freeamp_5 'm'
#define TC_IMPL_TC_Freeamp_6 'p'
   extern const struct CORBA_TypeCode_struct TC_Freeamp_struct;
#define TC_Freeamp ((CORBA_TypeCode)&TC_Freeamp_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string) && !defined(_CORBA_sequence_CORBA_string_defined)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define _CORBA_sequence_CORBA_string_defined 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'F'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'r'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'm'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'p'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_char **_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_CORBA_string;
   CORBA_char **CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'F'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'r'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'm'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'p'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
   extern CORBA_sequence_CORBA_string
      *CORBA_sequence_CORBA_string__alloc(void);
   extern gpointer CORBA_sequence_CORBA_string__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
#if !defined(_Freeamp_StringList_defined)
#define _Freeamp_StringList_defined 1
   typedef CORBA_sequence_CORBA_string Freeamp_StringList;
#if !defined(TC_IMPL_TC_Freeamp_StringList_0)
#define TC_IMPL_TC_Freeamp_StringList_0 'F'
#define TC_IMPL_TC_Freeamp_StringList_1 'r'
#define TC_IMPL_TC_Freeamp_StringList_2 'e'
#define TC_IMPL_TC_Freeamp_StringList_3 'e'
#define TC_IMPL_TC_Freeamp_StringList_4 'a'
#define TC_IMPL_TC_Freeamp_StringList_5 'm'
#define TC_IMPL_TC_Freeamp_StringList_6 'p'
   extern const struct CORBA_TypeCode_struct TC_Freeamp_StringList_struct;
#define TC_Freeamp_StringList ((CORBA_TypeCode)&TC_Freeamp_StringList_struct)
#endif
   extern Freeamp_StringList *Freeamp_StringList__alloc(void);
   extern gpointer Freeamp_StringList__free(gpointer mem, gpointer dat,
					    CORBA_boolean free_strings);	/* ORBit internal use */
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*TogglePause) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
      void (*Previous) (PortableServer_Servant _servant,
			CORBA_Environment * ev);
      void (*Next) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*Quit) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*Play) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*Stop) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*AddSong) (PortableServer_Servant _servant,
		       const CORBA_char * url, CORBA_Environment * ev);
      void (*PlayNumber) (PortableServer_Servant _servant,
			  const CORBA_char * number, CORBA_Environment * ev);
      void (*GetPlaylist) (PortableServer_Servant _servant,
			   Freeamp_StringList ** list,
			   CORBA_Environment * ev);
       CORBA_long(*GetNumber) (PortableServer_Servant _servant,
			       CORBA_Environment * ev);
      void (*DeleteNumber) (PortableServer_Servant _servant,
			    const CORBA_long number, CORBA_Environment * ev);
   }
   POA_Freeamp__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Freeamp__epv *Freeamp_epv;
   }
   POA_Freeamp__vepv;
   typedef struct
   {
      void *_private;
      POA_Freeamp__vepv *vepv;
   }
   POA_Freeamp;
   extern void POA_Freeamp__init(PortableServer_Servant servant,
				 CORBA_Environment * ev);
   extern void POA_Freeamp__fini(PortableServer_Servant servant,
				 CORBA_Environment * ev);

/** prototypes **/
   void Freeamp_TogglePause(Freeamp _obj, CORBA_Environment * ev);
   void Freeamp_Previous(Freeamp _obj, CORBA_Environment * ev);
   void Freeamp_Next(Freeamp _obj, CORBA_Environment * ev);
   void Freeamp_Quit(Freeamp _obj, CORBA_Environment * ev);
   void Freeamp_Play(Freeamp _obj, CORBA_Environment * ev);
   void Freeamp_Stop(Freeamp _obj, CORBA_Environment * ev);
   void Freeamp_AddSong(Freeamp _obj, const CORBA_char * url,
			CORBA_Environment * ev);
   void Freeamp_PlayNumber(Freeamp _obj, const CORBA_char * number,
			   CORBA_Environment * ev);
   void Freeamp_GetPlaylist(Freeamp _obj, Freeamp_StringList ** list,
			    CORBA_Environment * ev);
   CORBA_long Freeamp_GetNumber(Freeamp _obj, CORBA_Environment * ev);
   void Freeamp_DeleteNumber(Freeamp _obj, const CORBA_long number,
			     CORBA_Environment * ev);

   void _ORBIT_skel_Freeamp_TogglePause(POA_Freeamp * _ORBIT_servant,
					GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev,
					void (*_impl_TogglePause)
					(PortableServer_Servant _servant,
					 CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_Previous(POA_Freeamp * _ORBIT_servant,
				     GIOPRecvBuffer * _ORBIT_recv_buffer,
				     CORBA_Environment * ev,
				     void (*_impl_Previous)
				     (PortableServer_Servant _servant,
				      CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_Next(POA_Freeamp * _ORBIT_servant,
				 GIOPRecvBuffer * _ORBIT_recv_buffer,
				 CORBA_Environment * ev,
				 void (*_impl_Next) (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_Quit(POA_Freeamp * _ORBIT_servant,
				 GIOPRecvBuffer * _ORBIT_recv_buffer,
				 CORBA_Environment * ev,
				 void (*_impl_Quit) (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_Play(POA_Freeamp * _ORBIT_servant,
				 GIOPRecvBuffer * _ORBIT_recv_buffer,
				 CORBA_Environment * ev,
				 void (*_impl_Play) (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_Stop(POA_Freeamp * _ORBIT_servant,
				 GIOPRecvBuffer * _ORBIT_recv_buffer,
				 CORBA_Environment * ev,
				 void (*_impl_Stop) (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_AddSong(POA_Freeamp * _ORBIT_servant,
				    GIOPRecvBuffer * _ORBIT_recv_buffer,
				    CORBA_Environment * ev,
				    void (*_impl_AddSong)
				    (PortableServer_Servant _servant,
				     const CORBA_char * url,
				     CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_PlayNumber(POA_Freeamp * _ORBIT_servant,
				       GIOPRecvBuffer * _ORBIT_recv_buffer,
				       CORBA_Environment * ev,
				       void (*_impl_PlayNumber)
				       (PortableServer_Servant _servant,
					const CORBA_char * number,
					CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_GetPlaylist(POA_Freeamp * _ORBIT_servant,
					GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev,
					void (*_impl_GetPlaylist)
					(PortableServer_Servant _servant,
					 Freeamp_StringList ** list,
					 CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_GetNumber(POA_Freeamp * _ORBIT_servant,
				      GIOPRecvBuffer * _ORBIT_recv_buffer,
				      CORBA_Environment * ev,
				      CORBA_long(*_impl_GetNumber)
				      (PortableServer_Servant _servant,
				       CORBA_Environment * ev));
   void _ORBIT_skel_Freeamp_DeleteNumber(POA_Freeamp * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_DeleteNumber)
					 (PortableServer_Servant _servant,
					  const CORBA_long number,
					  CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
